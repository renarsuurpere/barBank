openapi: 3.0.2
info:
  title: barBank
  version: 1.0.0
paths:
  /users:
    summary: Path used to manage the list of users.
    description: >-
      The REST endpoint/path used to list and create zero or more `user` entities.  This path contains a
      `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `user` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      tags:
        - users
      responses:
        '201':
          description: Successful response.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                'User validation failed: {param}: Path ''{param}'' is required.':
                  value:
                    error: 'User validation failed: {param}: Path ''{param}'' is required.'
                Invalid password.:
                  value:
                    error: Invalid password
          description: Input validation failed. Some parameter is missing.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Username already exists.:
                  value:
                    error: Username already exists
          description: Username already exists.
      operationId: createuser
      summary: Create a user
      description: Creates a new instance of a `user`.
  /sessions:
    summary: Path used to manage the list of sessions.
    description: >-
      The REST endpoint/path used to list and create zero or more `session` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `session` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/session'
            examples:
              POST /sessions request body:
                value:
                  username: renarq
                  password: secret1234
        required: true
      tags:
        - sessions
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/session'
              examples:
                POST /sessions 201 response:
                  value:
                    token: abcdefgh12345678
          description: Successful response.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Invalid credentials:
                  value:
                    error: Invalid credentials
                Invalid token:
                  value:
                    error: Invalid token
          description: Invalid credentials
      operationId: createsession
      summary: Create a session
      description: Creates a new instance of a `session`.
    delete:
      tags:
        - sessions
      responses:
        '204':
          description: Successful logout
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Invalid Authorization header:
                  value:
                    error: Invalid Authorization header
                Invalid Authorization header format:
                  value:
                    error: Invalid Authorization header format
                Missing Authorization header:
                  value:
                    error: Missing Authorization header
                Invalid token:
                  value:
                    error: Invalid token
          description: Invalid Authorization header
      summary: Logout
components:
  schemas:
    user:
      title: Root Type for user
      description: ''
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        name:
          type: string
      example:
        username: renar
        password: secret
        name: Renar Suurpere
    error:
      title: Root Type for error
      description: ''
      type: object
      properties:
        error:
          type: string
      example:
        error: Error message.
    session:
      description: ''
      type: object
tags:
  -
    name: sessions
    description: ''
  -
    name: users
    description: ''
